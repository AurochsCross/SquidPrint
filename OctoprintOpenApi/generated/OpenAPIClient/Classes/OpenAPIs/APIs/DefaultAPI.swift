//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Combine



open class DefaultAPI {
    /**
     Issue command to printhead
     
     - parameter printHeadInstructions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func printerPrintheadPost(printHeadInstructions: PrintHeadInstructions, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promisse in
            printerPrintheadPostWithRequestBuilder(printHeadInstructions: printHeadInstructions).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promisse(.success(()))
                case let .failure(error):
                    promisse(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }

    /**
     Issue command to printhead
     - POST /printer/printhead
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKeyAuth
     - parameter printHeadInstructions: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func printerPrintheadPostWithRequestBuilder(printHeadInstructions: PrintHeadInstructions) -> RequestBuilder<Void> {
        let path = "/printer/printhead"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: printHeadInstructions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
